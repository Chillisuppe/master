!*******************************************************************************
!
!> @file  DG_initial_atmosphereatrest_chandra.f90
!> @brief contains module DG_initial
!
!*******************************************************************************
! MODULE DESCRIPTION:
!> @brief initialize fields with a stationary atmosphere, see Benacchio (2014)
!
MODULE DG_initial

  USE GRID_api
  USE FLASH_parameters
  USE DG_equation, ONLY : i_nprogvars, i_valQ, PrimitiveToProgvars

  PRIVATE
  PUBLIC  i_ntstintparam, i_ntstrealparam, i_ntstcharparam, i_ntstlogparam, &
          initial_setparam, p_testparam, fvm_initialvalues, fvm_initialvalues_iter, &
          source_update, dg_elmt_solution

  TYPE (test_param)                                   :: p_testparam
  INTEGER, PARAMETER                                  :: i_ntstintparam  = 0
  INTEGER, PARAMETER                                  :: i_ntstrealparam = 2
  INTEGER, PARAMETER                                  :: i_ntstcharparam = 0
  INTEGER, PARAMETER                                  :: i_ntstlogparam  = 0

  CONTAINS

!*******************************************************************************
! DESCRIPTION of [SUBROUTINE initial_setparam]:
!> @brief initializes test case specific parameter list
!
  SUBROUTINE initial_setparam

    IMPLICIT NONE

    ! pressure perturbation eta
    p_testparam%treal(1)%c_keyword = 'PRESSURE_PERTURBATION'
    p_testparam%treal(1)%i_size    = 1

    ! initial velocity (u0, v0)
    p_testparam%treal(2)%c_keyword = 'INITIAL_VELO'
    p_testparam%treal(2)%i_size    = 2

  END SUBROUTINE initial_setparam

!*******************************************************************************
! DESCRIPTION of [SUBROUTINE fvm_initialvalues]:
!> @brief initializes a grid with values
!>
!> @param[in]       p_ghand       grid handling data structure
!> @param[in,out]   p_param       control structure for global parameters
!> @param[in]       r_time        current model time
!>
!> @note This is just a dummy in this case.
!
  SUBROUTINE fvm_initialvalues(p_ghand, p_param, r_time)

    IMPLICIT NONE

    TYPE (grid_handle), INTENT(in)                        :: p_ghand
    TYPE (control_struct), INTENT(inout)                  :: p_param
    REAL (KIND = GRID_SR), INTENT(in)                     :: r_time

    GRID_GRAV      = 1.0_GRID_SR

    CALL fvm_initialvalues_iter(p_ghand, p_param, r_time)

  END SUBROUTINE fvm_initialvalues

!*******************************************************************************
! DESCRIPTION of [SUBROUTINE fvm_initialvalues_iter]:
!> @brief initializes a grid with values
!>
!> @param[in]       p_ghand       grid handling data structure
!> @param[in,out]   p_param       control structure for global parameters
!> @param[in]       r_time        current model time
!>
!> @note This routine initializes the flow field.
!
  SUBROUTINE fvm_initialvalues_iter(p_ghand, p_param, r_time)

    IMPLICIT NONE

    TYPE (grid_handle), INTENT(in)                        :: p_ghand
    TYPE (control_struct), INTENT(inout)                  :: p_param
    REAL (KIND = GRID_SR), INTENT(in)                     :: r_time

!--- local declarations
    INTEGER (KIND = GRID_SI)                              :: i_faceunknowns, i_numelmt, &
      i_num, i_alct
    INTEGER (KIND = GRID_SI), DIMENSION(:,:), ALLOCATABLE :: i_elmtdofs
    REAL (KIND = GRID_SR), DIMENSION(:,:), ALLOCATABLE    :: r_coodof

!--- initialize some constants
    i_faceunknowns = GRID_femtypes%p_type(FEM_DG)%sig%i_unknowns
    i_numelmt      = p_ghand%i_enumfine
    i_num          = i_numelmt*i_faceunknowns

!--- allocate workspace
    ALLOCATE(i_elmtdofs(i_faceunknowns, i_numelmt), &
             r_coodof(GRID_dimension, i_num), STAT=i_alct)
    IF(i_alct /= 0) CALL grid_error(c_error='[fvm_initialvalues_iter]: could not allocate grid field')

!--- get grid information
    CALL grid_getinfo(p_ghand, i_femtype=FEM_DG, l_relative=.TRUE., &
                      l_finelevel=.TRUE., i_elementdofs=i_elmtdofs, r_dofcoordinates=r_coodof)

!--- initialize fields
    CALL initial_atmosphere(p_ghand, r_coodof, i_num, i_elmtdofs, i_faceunknowns, i_numelmt)

!--- deallocate workspace
    DEALLOCATE(i_elmtdofs, r_coodof)

  END SUBROUTINE fvm_initialvalues_iter

!*******************************************************************************
! DESCRIPTION of [SUBROUTINE source_update]:
!> @brief updates the source terms
!>
!> @param[in]       p_param       control structure for global parameters
!> @param[in]       r_time        model time at which source term is evaluated
!> @param[in]       i_numelmt     number of elements
!> @param[in]       i_elmtdofs
!> @param           r_coodof      coordinates of DOFs
!
  SUBROUTINE source_update(p_param, r_time, i_numelmt, i_elmtdofs, r_coodof, &
                           l_gridchanged, r_Q, r_S)

    IMPLICIT NONE

    TYPE (control_struct),                    INTENT(in)    :: p_param
    REAL (KIND = GRID_SR),                    INTENT(in)    :: r_time
    INTEGER (KIND = GRID_SI),                 INTENT(in)    :: i_numelmt
    INTEGER (KIND = GRID_SI), DIMENSION(:,:), INTENT(in)    :: i_elmtdofs
    REAL (KIND = GRID_SR), DIMENSION(:,:),    INTENT(in)    :: r_coodof
    LOGICAL,                                  INTENT(in)    :: l_gridchanged
    REAL (KIND = GRID_SR), DIMENSION(:,:),    INTENT(inout) :: r_Q, r_S

  END SUBROUTINE source_update

!*******************************************************************************
! DESCRIPTION of [SUBROUTINE dg_elmt_solution]:
!> @brief computes the exact solution approximated in the DG space to compare
!>        with in diagnostics
!>
!> @param[in]       r_coodof        coordinates where solution should be computed
!> @param[in]       r_time          model time
!> @param[in]       i_numelmt       number of elements
!> @param[in]       i_elmtdofs      DOFs of element
!> @param[in]       r_coonod        coordinates of element nodes
!> @param[in]       i_elmtnodes     nodes of element
!> @param           r_sol           computed exact solution
!
  SUBROUTINE dg_elmt_solution(r_coodof, r_time, i_numelmt, &
                              i_elmtdofs, r_coonod, i_elmtnodes, r_sol)

    IMPLICIT NONE

    REAL (KIND = GRID_SR),    DIMENSION(:,:), INTENT(IN)        :: r_coodof, r_coonod
    REAL (KIND = GRID_SR),                    INTENT(IN)        :: r_time
    INTEGER (KIND = GRID_SI),                 INTENT(IN)        :: i_numelmt
    INTEGER (KIND = GRID_SI), DIMENSION(:,:), INTENT(IN)        :: i_elmtdofs, i_elmtnodes
    REAL (KIND = GRID_SR),    DIMENSION(:,:), INTENT(INOUT)     :: r_sol

    r_sol = 0.0_GRID_SR

  END SUBROUTINE dg_elmt_solution

!*******************************************************************************
! Only internal subroutines follow
!*******************************************************************************
! DESCRIPTION of [SUBROUTINE initial_atmosphere]:
!> @brief calculates the atmosphere as in Chandrashekar & Zenk (2016)
!>
!> @param[in]       r_coodof            coordinates of DOFs
!> @param[in]       i_numdof            number of DOFs
!> @param[in]       p_ghand             control structure
!>
!> @note this initial case is taken from (Chandrashekar & Zenk, 2016)

  SUBROUTINE initial_atmosphere(p_ghand, r_coodof, i_numdof, i_elmtdofs, i_faceunknowns, i_numelmt)

    IMPLICIT NONE

    TYPE (grid_handle),                       INTENT(IN)  :: p_ghand
    REAL (KIND = GRID_SR), DIMENSION(:,:),    INTENT(IN)  :: r_coodof
    INTEGER (KIND = GRID_SI),                 INTENT(IN)  :: i_numdof
    INTEGER (KIND = GRID_SI),                 INTENT(IN)  :: i_faceunknowns
    INTEGER (KIND = GRID_SI),                 INTENT(IN)  :: i_numelmt
    INTEGER (KIND = GRID_SI), DIMENSION(:,:), INTENT(IN)  :: i_elmtdofs

    REAL (KIND = GRID_SR)                              :: r_rho, r_pressure, r_eta
    REAL (KIND = GRID_SR), DIMENSION(2)                :: r_bblecntr, r_velo0
    REAL (KIND = GRID_SR), DIMENSION(:,:), ALLOCATABLE :: r_vars
    REAL (KIND = GRID_SR), DIMENSION(i_numelmt)        :: r_coo_mean, r_rho_mean, r_nrg_mean
    INTEGER (KIND = GRID_SI)                           :: i_dof, i_alct, i_elmt

!--- allocate DG variables
    ALLOCATE(r_vars(i_nprogvars,i_numdof), STAT=i_alct)
    IF(i_alct /= 0) &
      CALL grid_error(c_error='[initial_atmosphere]: could not allocate grid field')

    r_vars = 0.0_GRID_SR
!--- initialize several constants
    r_eta   = p_testparam%treal(1)%p_value(1)         ! pressure perturbation
    r_velo0 = p_testparam%treal(2)%p_value            ! initial velocity

!--- add perturbation to THETA and calculate variables
    DO i_dof = 1, i_numdof
      r_pressure = EXP(-GRID_GRAV * r_coodof(2,i_dof)) + &
                   r_eta * EXP(-100.0_GRID_SR * (r_coodof(2,i_dof)-0.5_GRID_SR)**2)
      r_rho      = EXP(-GRID_GRAV * r_coodof(2,i_dof))

!--- calculate total energy if total energy form is used
      CALL PrimitiveToProgvars([r_rho, r_velo0, r_pressure], r_vars(:,i_dof))

!--- r_vars are the conserved variables with
!  r_vars(1,i_dof) = r_rho           being rho
!  r_vars(2,i_dof) = r_rho*r_velo(1) being rho * u
!  r_vars(3,i_dof) = r_rho*r_velo(2) being rho * v
!  r_vars(4,i_dof) = r_rho*r_theta   being rho * theta

    END DO !i_dof

!--- write variables to grid
    CALL grid_putinfo(p_ghand, l_finelevel=.TRUE., i_arraypoint=i_valQ, r_dofvalues=r_vars)

    DEALLOCATE(r_vars)

  END SUBROUTINE initial_atmosphere


!*******************************************************************************
END MODULE DG_initial
